kind: Namespace
apiVersion: v1
metadata:
  name: volume-nfs
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${PV}
  namespace: volume-nfs
  labels:
    volume.io/nfs: ${PV}
spec:
  serviceName: ${PV}
  replicas: 1
  selector:
    matchLabels:
      volume.io/nfs: ${PV}
  template:
    metadata:
      labels:
        volume.io/nfs: ${PV}
    spec:
      restartPolicy: Always
      priorityClassName: system-node-critical
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 0
      containers:
      - name: ${PV} 
        image: dockerhub.azk8s.cn/library/busybox
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: '200m'
            memory: '200Mi'              
        ports:
        - name: nfs
          containerPort: 2049
        - name: nfs-udp
          containerPort: 2049
          protocol: UDP
        - name: nlockmgr
          containerPort: 32803
        - name: nlockmgr-udp
          containerPort: 32803
          protocol: UDP
        - name: mountd
          containerPort: 20048
        - name: mountd-udp
          containerPort: 20048
          protocol: UDP
        - name: rquotad
          containerPort: 875
        - name: rquotad-udp
          containerPort: 875
          protocol: UDP
        - name: rpcbind
          containerPort: 111
        - name: rpcbind-udp
          containerPort: 111
          protocol: UDP
        - name: statd
          containerPort: 662
        - name: statd-udp
          containerPort: 662
          protocol: UDP
        env:
        - name: THIS_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: THIS_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: BASENAME
          value: ${PV}
        command:
        - /bin/sh
        args:
        - -xc
        - |
          # set env file 
          echo "POD_UID=${THIS_POD_UID} 
          EXPORT_IP=0.0.0.0/0.0.0.0" > /var/lib/volume/nfs/${BASENAME}.env
          # start systemd to export
          SERVICE="volume-nfs@${BASENAME}.service"
          nsenter -t1 -m -- systemctl start "${SERVICE}"
          nsenter -t1 -m -- systemctl status "${SERVICE}"

          # check for success
          nsenter -t1 -m -- systemctl is-active "${SERVICE}" || exit 1

          _exit_script() {
            nsenter -t1 -m -- systemctl stop --no-block "${SERVICE}"
            exit
          }

          # main loop
          trap _exit_script SIGTERM SIGINT SIGKILL
          while :
          do
              sleep 1
          done
        readinessProbe:
          tcpSocket:
            port: 2049
          periodSeconds: 1
        volumeMounts:
        - mountPath: /var/lib/volume/nfs
          name: nfs
        volumeDevices:
        - devicePath: /dev/block
          name: data
      volumes:
      - name: nfs
        hostPath:
            path: /var/lib/volume/nfs
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      volumeMode: Block
      accessModes:
      - ReadWriteMany
      storageClassName: ${SC}
      resources:
        requests:
          storage: ${SIZE}
---
apiVersion: v1
kind: Service
metadata:
  name: ${PV}
  namespace: volume-nfs
  labels:
    volume.io/nfs: ${PV}
spec:
  type: ClusterIP
  ports:
  - name: nfs
    port: 2049
  - name: nfs-udp
    port: 2049
    protocol: UDP
  - name: nlockmgr
    port: 32803
  - name: nlockmgr-udp
    port: 32803
    protocol: UDP
  - name: mountd
    port: 20048
  - name: mountd-udp
    port: 20048
    protocol: UDP
  - name: rquotad
    port: 875
  - name: rquotad-udp
    port: 875
    protocol: UDP
  - name: rpcbind
    port: 111
  - name: rpcbind-udp
    port: 111
    protocol: UDP
  - name: statd
    port: 662
  - name: statd-udp
    port: 662
    protocol: UDP
  selector:
    volume.io/nfs: ${PV}
