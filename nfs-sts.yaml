kind: Namespace
apiVersion: v1
metadata:
  name: volume-nfs
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${nfs_sts}
  namespace: volume-nfs
  labels:
    volume.io/nfs: ${nfs_sts}
spec:
  serviceName: ${nfs_sts}
  replicas: 1
  selector:
    matchLabels:
      volume.io/nfs: ${nfs_sts}
  template:
    metadata:
      labels:
        volume.io/nfs: ${nfs_sts}
    spec:
      restartPolicy: Always
      # priorityClassName: system-node-critical
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 0
      containers:
      - name: export
        image: busybox
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: '200m'
            memory: '200Mi'
        env:
        - name: pod_uid
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: nfs_ns
          value: ${nfs_ns}
        - name: nfs_pvc
          value: ${nfs_pvc}
        - name: data_pv
          value: ${data_pv}
        - name: export_dir
          value: /var/lib/volume/nfs/${data_pv}
        - name: export_opt
          value: rw,insecure,no_root_squash,no_subtree_check,crossmnt
        - name: export_ip
          value: "0.0.0.0"
        # - name: export_ip
        #   valueFrom:
        #     fieldRef:
        #       fieldPath: status.podIP
        command:
        - /bin/sh
        args:
        - -axc
        - |
          # get device
          data_dev="$( df | grep "$export_dir" | awk '{print $1}' )"

          if [ "${export_ip}" = "0.0.0.0" ]; then
            export_mask="0.0.0.0"
          else 
            export_mask="$( ifconfig | awk "/${export_ip}/ {print \$4}" | sed 's/Mask://' )"
          fi 

          # set env file
          printenv | grep -E nfs_\|data_\|export_\|pod_ > ${export_dir}.env

          # start systemd to export
          nfs_service="volume-nfs@${data_pv}.service"
          nsenter -t1 -m -- systemctl start "${nfs_service}"
          
          # check for success
          let timer=0
          until nsenter -t1 -m -- systemctl is-active "${nfs_service}"; do
            sleep 1
            let timer++
            [ "${timer}" -ge 10 ] && exit 1
          done 

          # show logs
          nsenter -t1 -m -- systemctl status "$nfs_service"

          # exit script 
          _exit_script() {
            nsenter -t1 -m -- systemctl stop --no-block "$nfs_service"
            exit
          }

          # main loop
          trap _exit_script SIGTERM SIGINT SIGKILL
          set +x
          while true
          do
            sleep 1
          done
        readinessProbe:
          tcpSocket:
            port: 2049
          periodSeconds: 1
        volumeMounts:
        - mountPath: /var/lib/volume/nfs
          name: nfs
          mountPropagation: Bidirectional
        - name: data
          mountPath: /var/lib/volume/nfs/${data_pv}
      volumes:
      - name: nfs
        hostPath:
          path: /var/lib/volume/nfs
      - name: data
        persistentVolumeClaim:
          claimName: ${data_pvc}
---
apiVersion: v1
kind: Service
metadata:
  name: ${nfs_sts}
  namespace: volume-nfs
  labels:
    volume.io/nfs: ${nfs_sts}
spec:
  selector:
      volume.io/nfs: ${nfs_sts}
  type: ClusterIP
  ports:
  - name: nfs
    port: 2049
  - name: nfs-udp
    port: 2049
    protocol: UDP
  - name: nlockmgr
    port: 32803
  - name: nlockmgr-udp
    port: 32803
    protocol: UDP
  - name: mountd
    port: 20048
  - name: mountd-udp
    port: 20048
    protocol: UDP
  - name: rquotad
    port: 875
  - name: rquotad-udp
    port: 875
    protocol: UDP
  - name: rpcbind
    port: 111
  - name: rpcbind-udp
    port: 111
    protocol: UDP
  - name: statd
    port: 662
  - name: statd-udp
    port: 662
    protocol: UDP

